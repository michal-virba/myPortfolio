"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var n;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(n="Object"===(n=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArrayLimit(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,l,i=[],s=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(i.push(r.value),i.length!==t);s=!0);}catch(e){c=!0,o=e}finally{try{if(!s&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(c)throw o}}return i}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var App=_createClass(function e(){_classCallCheck(this,e),new Modal,new PageScroll,new TabbedComponent,new MenuFade,new Sticky,new RevealSections,new Skills,new LazyLoading,new Slider}),app=new App,modal=document.querySelector(".modal"),overlay=document.querySelector(".overlay"),btnCloseModal=document.querySelector(".btn--close-modal"),btnsOpenModal=document.querySelectorAll(".btn--show-modal"),btnScrollTo=document.querySelector(".btn--scroll-to"),section2=document.querySelector("#section--2"),tabs=document.querySelectorAll(".skills__tab"),tabsContainer=document.querySelector(".skills__tab-container"),tabsContent=document.querySelectorAll(".skills__content"),nav=document.querySelector(".nav"),navBar=document.querySelector(".nav__links--bar"),navIcon=document.querySelector(".nav__link--icon"),Modal=function(){function n(){var t=this;_classCallCheck(this,n),btnsOpenModal.forEach(function(e){return e.addEventListener("click",t.openModal)});for(var e=0;e<btnsOpenModal.length;e++)btnsOpenModal[e].addEventListener("click",this.openModal);btnCloseModal.addEventListener("click",this.closeModal),overlay.addEventListener("click",this.closeModal),this.escKey()}return _createClass(n,[{key:"openModal",value:function(e){e.preventDefault(),modal.classList.remove("hidden"),overlay.classList.remove("hidden")}},{key:"closeModal",value:function(){modal.classList.add("hidden"),overlay.classList.add("hidden")}},{key:"escKey",value:function(){var t=this;document.addEventListener("keydown",function(e){"Escape"!==e.key||modal.classList.contains("hidden")||t.closeModal()})}}]),n}(),PageScroll=_createClass(function e(){_classCallCheck(this,e),btnScrollTo.addEventListener("click",function(){section2.scrollIntoView({behavior:"smooth"})}),document.querySelector(".nav__links").addEventListener("click",function(e){e.preventDefault(),e.target.classList.contains("nav__link")&&(e=e.target.getAttribute("href"),document.querySelector(e).scrollIntoView({behavior:"smooth"}))}),navIcon.addEventListener("click",function(e){navBar.classList.toggle("hidden")}),navBar.addEventListener("click",function(e){e.preventDefault(),e.target.classList.contains("nav__link")&&(e=e.target.getAttribute("href"),document.querySelector(e).scrollIntoView({behavior:"smooth"}),navBar.classList.add("hidden"))})}),TabbedComponent=_createClass(function e(){_classCallCheck(this,e),tabsContainer.addEventListener("click",function(e){e=e.target.closest(".skills__tab");e&&(tabs.forEach(function(e){return e.classList.remove("skills__tab--active")}),tabsContent.forEach(function(e){return e.classList.remove("skills__content--active")}),e.classList.add("skills__tab--active"),document.querySelector(".skills__content--".concat(e.dataset.tab)).classList.add("skills__content--active"))})}),MenuFade=function(){function e(){_classCallCheck(this,e),nav.addEventListener("mouseover",this.handleHover.bind(.5)),nav.addEventListener("mouseout",this.handleHover.bind(1))}return _createClass(e,[{key:"handleHover",value:function(e){var t,n,r=this;e.target.classList.contains("nav__link")&&(e=(t=e.target).closest(".nav").querySelectorAll(".nav__link"),n=t.closest(".nav").querySelector("img"),e.forEach(function(e){e!==t&&(e.style.opacity=r)}),n.style.opacity=this)}}]),e}(),Sticky=function(){function n(){_classCallCheck(this,n);var e=document.querySelector(".header"),t=nav.getBoundingClientRect().height;new IntersectionObserver(this.stickyNav,{root:null,threshold:0,rootMargin:"-".concat(t,"px")}).observe(e)}return _createClass(n,[{key:"stickyNav",value:function(e){_slicedToArray(e,1)[0].isIntersecting?nav.classList.remove("sticky"):nav.classList.add("sticky")}}]),n}(),Skills=function(){function t(){_classCallCheck(this,t);var e=document.querySelector(".skills__blur");e.addEventListener("mouseover",this.skillsHover.bind(10)),e.addEventListener("mouseout",this.skillsHover.bind(0))}return _createClass(t,[{key:"skillsHover",value:function(e){var t=this,n=e.target,e=null==(e=n.closest(".skills__images"))?void 0:e.querySelectorAll(".skills__image");null!=e&&e.forEach(function(e){e!==n&&(e.style.filter="blur(".concat(t,"px)"))})}}]),t}(),RevealSections=function(){function n(){_classCallCheck(this,n);var e=document.querySelectorAll(".section"),t=new IntersectionObserver(this.revealSection,{root:null,threshold:.1});e.forEach(function(e){t.observe(e),e.classList.add("section--hidden")})}return _createClass(n,[{key:"revealSection",value:function(e,t){e=_slicedToArray(e,1)[0];e.isIntersecting&&(e.target.classList.remove("section--hidden"),t.unobserve(e.target))}}]),n}(),LazyLoading=function(){function n(){_classCallCheck(this,n);var e=document.querySelectorAll("img[data-src]"),t=new IntersectionObserver(this.loadImg,{root:null,threshold:0,rootMargin:"200px"});e.forEach(function(e){return t.observe(e)})}return _createClass(n,[{key:"loadImg",value:function(e,t){var n=_slicedToArray(e,1)[0];n.isIntersecting&&(n.target.src=n.target.dataset.src,n.target.addEventListener("load",function(){n.target.classList.remove("lazy-img")}),t.unobserve(n.target))}}]),n}(),Slider=function(){function e(){_classCallCheck(this,e),this.slider()}return _createClass(e,[{key:"slider",value:function(){function t(e){document.querySelectorAll(".dots__dot").forEach(function(e){return e.classList.remove("dots__dot--active")}),document.querySelector('.dots__dot[data-slide="'.concat(e,'"]')).classList.add("dots__dot--active")}function n(n){e.forEach(function(e,t){return e.style.transform="translateX(".concat(100*(t-n),"%)")})}function r(){s===c-1?s=0:s++,n(s),t(s)}function o(){0===s?s=c-1:s--,n(s),t(s)}var e=document.querySelectorAll(".slide"),a=document.querySelector(".slider__btn--left"),l=document.querySelector(".slider__btn--right"),i=document.querySelector(".dots"),s=0,c=e.length;n(0),e.forEach(function(e,t){i.insertAdjacentHTML("beforeend",'<button class="dots__dot" data-slide="'.concat(t,'"></button>'))}),t(0),l.addEventListener("click",r),a.addEventListener("click",o),document.addEventListener("keydown",function(e){"ArrowLeft"===e.key&&o(),"ArrowRight"===e.key&&r()}),i.addEventListener("click",function(e){e.target.classList.contains("dots__dot")&&(e=e.target.dataset.slide,n(e),t(e))})}}]),e}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
